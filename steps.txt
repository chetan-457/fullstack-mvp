----------------------------------------------------------------------------------------------------------------------------------
frontend setup
----------------------------------------------------------------------------------------------------------------------------------
1. Create Folder Structure
mkdir fullstack-mvp && cd fullstack-mvp
mkdir frontend backend db

2. Initialize Git Repository
git init
gh repo create fullstack-mvp --public  # Or use GitHub web UI
git remote add origin https://github.com/yourusername/fullstack-mvp.git

3. Setup Next.js (Frontend)
cd frontend
npx create-next-app@latest . --app --ts


Select:

App Router: Yes

TypeScript: Yes

Tailwind (optional): Yes

✅ Commit your changes:

cd ..
git add .
git commit -m "Initial project structure and frontend setup"
git push -u origin main

----------------------------------------------------------------------------------------------------------------------------------
Backend
----------------------------------------------------------------------------------------------------------------------------------
1. Generate Express App
cd backend
npx express-generator --no-view
npm install

2. Edit backend/routes/index.js
// Add inside index.js or create a new route file
router.get('/hello', (req, res) => {
  res.json({ message: "Hello World" });
});

3. Start Server
npm start

4. Test Endpoint

Visit: http://localhost:3000/hello
----------------------------------------------------------------------------------------------------------------------------------
Dockerized Postgres
----------------------------------------------------------------------------------------------------------------------------------
1. Create docker-compose.yml in /db folder
version: '3.8'

services:
  db:
    image: postgres:15
    container_name: pgdb
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"

2. Start Postgres
cd db
docker-compose up -d

3. Connect with pg in Express

Install pg:

cd ../backend
npm install pg


Add a test route:

// backend/routes/dbtest.js
const express = require('express');
const router = express.Router();
const { Pool } = require('pg');

const pool = new Pool({
  user: 'user',
  host: 'localhost',
  database: 'mydb',
  password: 'pass',
  port: 5432,
});

router.get('/dbtest', async (req, res) => {
  try {
    const result = await pool.query('SELECT NOW()');
    res.json(result.rows[0]);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;


Plug it into app.js:

const dbtestRouter = require('./routes/dbtest');
app.use('/api', dbtestRouter);


Test at http://localhost:3000/api/dbtest
----------------------------------------------------------------------------------------------------------------------------------
Create Users Table + Seed Script
----------------------------------------------------------------------------------------------------------------------------------
1. Create SQL Seed File (db/init.sql)
CREATE TABLE IF NOT EXISTS users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL
);

INSERT INTO users (name)
VALUES ('Alice'), ('Bob'), ('Charlie');

2. Update docker-compose.yml

Mount the seed file:

volumes:
  - ./init.sql:/docker-entrypoint-initdb.d/init.sql


Full docker-compose.yml:

version: '3.8'

services:
  db:
    image: postgres:15
    container_name: pgdb
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

3. Rebuild DB
docker-compose down -v
docker-compose up -d


✅ You now have a users table with seed data!
----------------------------------------------------------------------------------------------------------------------------------
